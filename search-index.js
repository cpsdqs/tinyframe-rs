var N = null;var searchIndex = {};
searchIndex["tiny_frame"]={"doc":"","items":[[3,"Msg","tiny_frame","A TinyFrame message.",N,N],[12,"id","","The message ID.",0,N],[12,"is_response","","Whether or not this message is a response.",0,N],[12,"msg_type","","The message type.",0,N],[12,"data","","The message data.",0,N],[3,"MsgEncoder","","A TinyFrame message encoder.",N,N],[12,"sof_byte","","The start-of-frame byte. If set, will be prepended to every encoded message.",1,N],[12,"is_master","","Should be set to true if this is the master peer.",1,N],[3,"MsgDecoder","","A TinyFrame message decoder.",N,N],[12,"sof_byte","","The start-of-frame byte. If set, frames will have to start with this byte.",2,N],[0,"checksum","","",N,N],[4,"NoCheck","tiny_frame::checksum","No checksum.",N,N],[4,"XorSum","","This checksum type will return the bit-flipped xor of all the bytes in the buffer.",N,N],[4,"Crc16Sum","","This checksum type will return the CRC16 sum with the polynomial `0x8005 (x^16 + x^15 + x^2 + 1)`.",N,N],[4,"Crc32Sum","","This checksum type will return the CRC32 sum with the polynomial `0xedb88320`.",N,N],[8,"Checksum","","A checksum.",N,N],[16,"Output","","",3,N],[10,"sum","","Calculates the checksum of the given buffer.",3,N],[0,"number","tiny_frame","",N,N],[8,"BufferWritable","tiny_frame::number","A number type that can be written to a buffer using big endian encoding.",N,N],[10,"write_to_buf","","Appends the big endian byte value to the buffer.",4,[[["self"],["w"]],["result"]]],[8,"BufferReadable","","A number type that can be read from a buffer using big endian encoding.",N,N],[10,"add_be_byte","","Appends one byte to the number's binary representation.",5,[[["self"],["u8"]],["self"]]],[10,"size","","Returns the size of this type.",5,[[],["usize"]]],[8,"GenericNumber","","A generic number trait.",N,N],[10,"increment_id","","Increments this ID.",6,[[["self"]]]],[10,"add_master_peer_bit","","Adds the master peer bit to this ID.",6,[[["self"]]]],[10,"from_usize","","Converts a `usize` to this length type.",6,[[["usize"]],["option"]]],[11,"new","tiny_frame","Creates a new MsgEncoder.",1,[[],["msgencoder"]]],[11,"next_id","","Returns the next message ID.",1,[[["self"]],["id"]]],[11,"reset","","Resets the ID counter.",1,[[["self"]]]],[11,"encode","","Encodes this message into the given [Write] implementor with the given encoder. If this message is not a response, a new ID will be assigned by the encoder.",0,[[["self"],["w"],["msgencoder"]],["result"]]],[11,"create_response","","Creates a response message to this message.",0,[[["self"],["type"],["vec",["u8"]]],["msg"]]],[11,"new","","Creates a new MsgDecoder.",2,[[],["msgdecoder"]]],[11,"reset","","Resets this MsgDecoder to initial state.",2,[[["self"]]]],[11,"accept","","Accepts a single byte. Will return the received message if the frame has ended.",2,[[["self"],["u8"]],["option",["msg"]]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","tiny_frame::checksum","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"sum","","",7,N],[11,"sum","","",8,N],[11,"sum","","",9,N],[11,"sum","","",10,N],[11,"eq","tiny_frame","",0,[[["self"],["msg"]],["bool"]]],[11,"ne","","",0,[[["self"],["msg"]],["bool"]]],[11,"eq","","",1,[[["self"],["msgencoder"]],["bool"]]],[11,"ne","","",1,[[["self"],["msgencoder"]],["bool"]]],[11,"clone","","",0,[[["self"]],["msg"]]],[11,"clone","","",1,[[["self"]],["msgencoder"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"hash","","",0,N]],"paths":[[3,"Msg"],[3,"MsgEncoder"],[3,"MsgDecoder"],[8,"Checksum"],[8,"BufferWritable"],[8,"BufferReadable"],[8,"GenericNumber"],[4,"NoCheck"],[4,"XorSum"],[4,"Crc16Sum"],[4,"Crc32Sum"]]};
initSearch(searchIndex);
