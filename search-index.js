var searchIndex = {};
searchIndex["tiny_frame"] = {"doc":"TinyFrame is a simple library for building and parsing frames to be sent over a serial interface (e.g. UART, telnet etc.).","items":[[3,"Msg","tiny_frame","A TinyFrame message.",null,null],[12,"frame_id","","The message ID.",0,null],[12,"is_response","","Whether or not this message is a response.",0,null],[12,"msg_type","","The message type.",0,null],[12,"data","","The message data.",0,null],[3,"IDListener","","A wrapper around an ID listener. Dropping this removes the listener.",null,null],[12,"id","","The message ID for which this listener will be called.",1,null],[12,"listener","","The callback function.",1,null],[12,"timeout_max","","The timeout to which this listener can be reset to. If this is `None`, the ID listener will stay indefinitely.",1,null],[3,"TypeListener","","A wrapper around a type listener. Dropping this removes the listener.",null,null],[12,"msg_type","","The message type for which this listener will be called.",2,null],[12,"listener","","The callback function.",2,null],[3,"GenericListener","","A wrapper around a generic listener. Dropping this removes the listener.",null,null],[12,"listener","","The callback function.",3,null],[3,"TinyFrame","","A TinyFrame instance.",null,null],[12,"peer_bit","","The peer bit.",4,null],[12,"parser_timeout","","The parser timeout after which the parser will be reset.",4,null],[12,"sof_byte","","The optional start-of-header byte.",4,null],[12,"chunk_size","","The chunk size. 1024 by default.",4,null],[12,"cksum","","The checksum type. Xor by default.",4,null],[12,"write","","A function called every time something is written. This must be implemented.",4,null],[12,"claim_tx","","A function called before writing, for claiming the TX interface.",4,null],[12,"release_tx","","A function called after writing, for releasing the TX interface.",4,null],[4,"Checksum","","Checksum types.",null,null],[13,"None","","The no-op checksum type.",5,null],[13,"Xor","","This checksum type will return the bit-flipped xor of all the bytes in the buffer.",5,null],[13,"Crc16","","This checksum type will return the CRC16 sum with the polynomial `0x8005 (x^16 + x^15 + x^2 + 1)`.",5,null],[13,"Crc32","","This checksum type will return the CRC32 sum with the polynomial `0xedb88320`.",5,null],[4,"Peer","","Peer types.",null,null],[13,"Slave","","",6,null],[13,"Master","","",6,null],[4,"ListenerResult","","Event listener results.",null,null],[13,"Next","","Will do nothing.",7,null],[13,"Stay","","Will do nothing.",7,null],[13,"Renew","","Will renew an ID listener's timeout.",7,null],[13,"Close","","Will remove the event listener.",7,null],[4,"SendError","","Errors that can occur when sending a message.",null,null],[13,"TooLong","","The message data is too long",8,null],[13,"NoWrite","","The `write` function is not implemented",8,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"checksum"}}],[11,"hash","","",5,null],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"checksum"}],"output":{"name":"bool"}}],[11,"sum","","Calculates the checksum of the given buffer.",5,null],[11,"append_sum","","Appends the checksum of the given buffer to itself.",5,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"default","","",5,{"inputs":[],"output":{"name":"checksum"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"peer"}}],[11,"hash","","",6,null],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"peer"}],"output":{"name":"bool"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"peer"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"listenerresult"}}],[11,"hash","","",7,null],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"listenerresult"}],"output":{"name":"bool"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"listenerresult"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"msg"}}],[11,"hash","","",0,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"msg"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"msg"}],"output":{"name":"bool"}}],[11,"new","","Creates a new message.",0,null],[11,"create_response","","Creates a response to this message.",0,null],[11,"from","","",0,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"msg"}}],[11,"from","","",0,null],[11,"into","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"renew","","Renews this listener's timeout.",1,{"inputs":[{"name":"self"},{"name":"tinyframe"}],"output":null}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"senderror"}}],[11,"hash","","",8,null],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"senderror"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new TinyFrame with the specified peer bit.",4,{"inputs":[{"name":"peer"}],"output":{"name":"tinyframe"}}],[11,"reset_parser","","Resets the parser.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"add_id_listener","","Adds an ID listener.",4,{"inputs":[{"name":"self"},{"name":"id"},{"generics":["listener"],"name":"box"},{"generics":["ticks"],"name":"option"}],"output":{"generics":["idlistener"],"name":"rc"}}],[11,"add_type_listener","","Adds a type listener.",4,{"inputs":[{"name":"self"},{"name":"type"},{"generics":["listener"],"name":"box"}],"output":{"generics":["typelistener"],"name":"rc"}}],[11,"add_generic_listener","","Adds a generic listener.",4,{"inputs":[{"name":"self"},{"generics":["listener"],"name":"box"}],"output":{"generics":["genericlistener"],"name":"rc"}}],[11,"send","","Sends a message.",4,{"inputs":[{"name":"self"},{"name":"msg"}],"output":{"generics":["senderror"],"name":"result"}}],[11,"query","","Sends a message and binds an ID listener to listen for the response.",4,{"inputs":[{"name":"self"},{"name":"msg"},{"generics":["listener"],"name":"box"},{"generics":["ticks"],"name":"option"}],"output":{"generics":["rc","senderror"],"name":"result"}}],[11,"respond","","Sends a response.",4,{"inputs":[{"name":"self"},{"name":"msg"}],"output":{"generics":["senderror"],"name":"result"}}],[11,"accept","","Reads a buffer. This is just a small wrapper for `accept_byte`.",4,null],[11,"accept_byte","","Reads one byte.",4,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"tick","","This function should be called periodically to time-out partial frames and ID listeners.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_str","","",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[6,"Listener","","An event listener.",null,null],[6,"Ticks","","Tick type.",null,null],[8,"BufferWritable","","A number type that can be written to a buffer using big endian encoding.",null,null],[10,"write_to_buf","","Appends the big endian byte value to the buffer.",9,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[8,"BufferReadable","","A number type that can be read from a buffer using big endian encoding.",null,null],[10,"add_be_byte","","Appends one byte to the number's binary representation.",10,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"self"}}],[8,"GenericNumber","","A generic number trait.",null,null],[10,"increment_id","","Increments this ID.",11,{"inputs":[{"name":"self"}],"output":null}],[10,"add_master_peer_bit","","Adds the master peer bit to this ID.",11,{"inputs":[{"name":"self"}],"output":null}],[10,"from_usize","","Converts a `usize` to this length type.",11,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}]],"paths":[[3,"Msg"],[3,"IDListener"],[3,"TypeListener"],[3,"GenericListener"],[3,"TinyFrame"],[4,"Checksum"],[4,"Peer"],[4,"ListenerResult"],[4,"SendError"],[8,"BufferWritable"],[8,"BufferReadable"],[8,"GenericNumber"]]};
initSearch(searchIndex);
